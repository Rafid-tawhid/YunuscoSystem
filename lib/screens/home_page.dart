import 'dart:async';import 'dart:io' show Platform;import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import 'package:flutter_local_notifications/flutter_local_notifications.dart';import 'package:provider/provider.dart';import 'package:yunusco_group/helper_class/dashboard_helpers.dart';import 'package:yunusco_group/providers/notofication_provider.dart';import 'package:yunusco_group/screens/notification_screen.dart';import 'package:yunusco_group/providers/auth_provider.dart';import 'package:yunusco_group/providers/hr_provider.dart';import 'package:yunusco_group/screens/Inventory/inventory_screen.dart';import 'package:yunusco_group/service_class/notofication_helper.dart';import 'package:yunusco_group/utils/colors.dart';import 'package:yunusco_group/utils/constants.dart';import '../common_widgets/drawer.dart';import 'HR&PayRoll/hr_main_screen.dart';import 'Management/management_screen.dart';import 'Planning/planning_screen.dart';import 'Products/product_home_screen.dart';import 'Profile/profile_screen_menu.dart';import 'login_screen.dart';import 'Merchandising/merchandisingDashboardcreen.dart';import 'dart:io' show Platform;class HomeScreen extends StatefulWidget {  final String? buttonLabel;  final bool? isOnTp;  const HomeScreen({Key? key, this.buttonLabel, this.isOnTp}) : super(key: key);  @override  _HomeScreenState createState() => _HomeScreenState();}class _HomeScreenState extends State<HomeScreen> {  int myIndex = 0;  List<Menu> menus = [];  List<dynamic> moduleList = [];  final FlutterLocalNotificationsPlugin flutterLocalNotificationsPlugin = FlutterLocalNotificationsPlugin();  Future<void> _getModules() async {    menus = [      Menu(44, 'assets/images/purchase.png', 'Purchasing', false),      Menu(6, 'assets/images/management.png', 'Management', false),      Menu(45, 'assets/images/button-trims.png', 'Notifications', false),      Menu(1, 'assets/images/button-merch.png', 'Merchandising', false),      Menu(1, 'assets/images/planbold.png', 'Planning', false),      Menu(44, 'assets/images/prodbold.png', 'Production', false),      Menu(6, 'assets/images/INVENTORY-min.png', 'Inventory', false),      Menu(45, 'assets/images/ATTENDANCE-min.png', 'Accounts', false),      Menu(1, 'assets/images/hrbold.png', 'HR & Payroll', false),      Menu(1, 'assets/images/ATTENDANCE-min.png', 'Profile', false),      Menu(1, 'assets/images/button-sec.png', 'Settings', false),      Menu(1, 'assets/images/button-exim.png', 'Export Import', false),    ];    //set token    AppConstants.token = await DashboardHelpers.getString('token');    DashboardHelpers.currentUser = await DashboardHelpers.getUser();    // final pref = await SharedPreferences.getInstance();    // token = pref.getString('token');    // role = pref.getString('role');    // userName = pref.getString('userName');    // designation = pref.getString('designation');    // moduleList = jsonDecode(pref.getString('list') ?? '[]');    // for (var item in moduleList) {    //   int appModuleId = int.parse(item['moduleId'].toString());    //   for (var menu in menus) {    //     if (appModuleId == menu.id) {    //       setState(() {    //         menu.isVisible = true;    //       });    //     }    //   }    // }  }  @override  void initState() {    super.initState();    _getModules();    if (Platform.isAndroid) {      NotificationServices.setupPushNotifications(context);      NotificationServices.initializeNotifications();    }  }  @override  Widget build(BuildContext context) {    return Scaffold(      drawer: MyDrawer(),      appBar: AppBar(        //0xFF17003E        backgroundColor: Color(0xFF000044),        centerTitle: true,        title: Text(          'Welcome',          style: customTextStyle(20, Colors.white, FontWeight.w600),        ),        iconTheme: IconThemeData(          color: Colors.white, // Custom color for this AppBar's icons        ),        actions: [          InkWell(            onTap: () {              Navigator.push(context, CupertinoPageRoute(builder: (context) => NotificationsScreen()));            },            child: Stack(              children: [                Padding(                  padding: const EdgeInsets.all(8.0),                  child: Icon(Icons.notifications_active),                ),                Positioned(                  top: 0,                  right: 0,                  child: Consumer<NotificationProvider>(                    builder: (context,pro,_)=>Container(                      alignment: Alignment.center,                      decoration: BoxDecoration(color: Colors.red, shape: BoxShape.circle),                      child: Padding(                        padding: const EdgeInsets.all(4.0),                        child: Text(pro.notificationCount.toString(),style: customTextStyle(8, Colors.white, FontWeight.w500),),                      ),                    ),                  ),                ),              ],            ),          ),          IconButton(              onPressed: () async {                bool? isLogout = await DashboardHelpers.showLogoutDialog(context);                if (isLogout == true) {                  await context.read<AuthProvider>().logout();                  Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => LoginScreen()));                }              },              icon: Icon(                Icons.logout,                color: Colors.white,              ))        ],      ),      body: Container(        decoration: BoxDecoration(          image: DecorationImage(            image: AssetImage('assets/images/nbn2-min.png'),            fit: BoxFit.fill,          ),        ),        child: SingleChildScrollView(          child: Column(            children: [              Image.asset(                'assets/images/icon.png',                height: 120,                width: 200,              ),              GridView.builder(                padding: const EdgeInsets.all(10.0),                itemCount: menus.length,                shrinkWrap: true,                physics: NeverScrollableScrollPhysics(),                gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(crossAxisCount: 2),                itemBuilder: (context, index) {                  return GestureDetector(                    onTap: () {                      setState(() {                        myIndex = index;                      });                      _navigateToScreen(index);                    },                    child: Card(                      color: index == 1 || index == 3 || index == 4 || index == 5 || index == 6 || index == 8 || index == 9 ? Colors.green.shade50 : Colors.white,                      child: Column(                        mainAxisAlignment: MainAxisAlignment.center,                        children: [                          Image.asset(menus[index].icon, height: 70),                          SizedBox(                            height: 8,                          ),                          Text(                            menus[index].title,                            style: AppConstants.customTextStyle(16, Colors.black, FontWeight.w500),                          ),                        ],                      ),                    ),                  );                },              ),            ],          ),        ),      ),    );  }  void _navigateToScreen(num index) {    debugPrint('Index $index');    switch (index) {      case 3:        Navigator.push(context, CupertinoPageRoute(builder: (context) => MerchandisingScreen()));        break;      case 1:        Navigator.push(context, CupertinoPageRoute(builder: (context) => ManagementScreen()));        break;      case 4:        Navigator.push(context, CupertinoPageRoute(builder: (context) => PlanningScreen()));        break;      case 5:        // Navigator.push(context, CupertinoPageRoute(builder: (context) => MainProductScreen()));        Navigator.push(context, CupertinoPageRoute(builder: (context) => ProductHomeScreen()));        break;      case 6:        Navigator.push(context, CupertinoPageRoute(builder: (context) => InventoryStockScreen()));        break;      case 8:        Navigator.push(context, CupertinoPageRoute(builder: (context) => HrMainMenuScreen()));        break;      //      case 9:        Navigator.push(context, CupertinoPageRoute(builder: (context) => ProfileScreenMenu()));      case 2:        Navigator.push(context, CupertinoPageRoute(builder: (context) => NotificationsScreen()));        break;      default:        DashboardHelpers.showAlert(msg: 'Not Available');        return;    }  }}class Menu {  final int id;  final String icon;  final String title;  bool isVisible;  Menu(this.id, this.icon, this.title, this.isVisible);}